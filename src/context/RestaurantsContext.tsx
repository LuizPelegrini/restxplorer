// This is a React Context to encapsulate the logic and data regarding the restaurants added to the application
import React, {
  createContext,
  useContext,
  useState,
  useEffect,
  useCallback,
} from 'react';
import firebaseDB from '../config/firebase';

// basic data for every restaurant item
interface RestaurantInfo {
  id: string | null;
  name: string;
  address: string;
  business: string;
}

// TODO: Popular os dados do restaurante no componente RestaurantCard
// Dentro do useState da linha 33, buscar as informacoes do Firebase e ja colocar no state
// Remover um restaurante da lista (e consequentemente do banco)

// the context data & logic that will be accessible by the components of the application
interface RestaurantContextData {
  restaurants: RestaurantInfo[]; // all the restaurants saved in the application
  add: (data: Omit<RestaurantInfo, 'id'>) => void; // add a new restaurant
  remove: (id: string) => void; // remove a restaurant with the given id
}

// initialize the context
const RestaurantContext = createContext<RestaurantContextData>(
  {} as RestaurantContextData,
);

const RestaurantProvider: React.FC = ({ children }) => {
  const [restaurantsInfo, setRestaurantsInfo] = useState<RestaurantInfo[]>([]);

  // Upon component is mounted, fetch data from database
  useEffect(() => {
    async function getRestaurantInfo() {
      const restaurantData = await firebaseDB
        .child('restaurants')
        .once('value');

      const data = restaurantData.val();
      // convert snapshot into an array of RestaurantInfo
      const restaurants = Object.keys(data).map<RestaurantInfo>(key => ({
        id: key,
        ...data[key],
      }));

      setRestaurantsInfo(restaurants);
    }

    getRestaurantInfo();
  }, []);

  // Add a new restaurant to database
  const add = useCallback(
    ({ name, business, address }: Omit<RestaurantInfo, 'id'>) => {
      firebaseDB
        .child('restaurants')
        .push({ name, business, address })
        .then(
          // if the operation has completed successfully, then update the state
          success => {
            const newRestaurant: RestaurantInfo = {
              id: success.key, // assign the id generated by Firebase to the restaurant object
              name,
              business,
              address,
            };

            // update context component state
            setRestaurantsInfo([...restaurantsInfo, newRestaurant]);
          },
          error => {
            console.error('Error on saving restaurant', error);
          },
        );
    },
    [restaurantsInfo],
  );

  const remove = useCallback((id: string) => {
    // console.log('');
  }, []);

  return (
    <RestaurantContext.Provider
      value={{ restaurants: restaurantsInfo, add, remove }}
    >
      {children}
    </RestaurantContext.Provider>
  );
};

// Creating a hook to expose this context data
function useRestaurant(): RestaurantContextData {
  const context = useContext(RestaurantContext);

  if (!context) {
    throw new Error(
      'useRestaurant can only be used within a RestaurantProvider',
    );
  }

  return context;
}

export { RestaurantProvider, useRestaurant };
